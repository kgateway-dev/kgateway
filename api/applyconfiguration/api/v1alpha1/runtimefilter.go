// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

// RuntimeFilterApplyConfiguration represents a declarative configuration of the RuntimeFilter type for use
// with apply.
type RuntimeFilterApplyConfiguration struct {
	RuntimeKey               *string                              `json:"runtimeKey,omitempty"`
	PercentSampled           *FractionalPercentApplyConfiguration `json:"percentSampled,omitempty"`
	UseIndependentRandomness *bool                                `json:"useIndependentRandomness,omitempty"`
}

// RuntimeFilterApplyConfiguration constructs a declarative configuration of the RuntimeFilter type for use with
// apply.
func RuntimeFilter() *RuntimeFilterApplyConfiguration {
	return &RuntimeFilterApplyConfiguration{}
}

// WithRuntimeKey sets the RuntimeKey field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RuntimeKey field is set to the value of the last call.
func (b *RuntimeFilterApplyConfiguration) WithRuntimeKey(value string) *RuntimeFilterApplyConfiguration {
	b.RuntimeKey = &value
	return b
}

// WithPercentSampled sets the PercentSampled field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the PercentSampled field is set to the value of the last call.
func (b *RuntimeFilterApplyConfiguration) WithPercentSampled(value *FractionalPercentApplyConfiguration) *RuntimeFilterApplyConfiguration {
	b.PercentSampled = value
	return b
}

// WithUseIndependentRandomness sets the UseIndependentRandomness field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UseIndependentRandomness field is set to the value of the last call.
func (b *RuntimeFilterApplyConfiguration) WithUseIndependentRandomness(value bool) *RuntimeFilterApplyConfiguration {
	b.UseIndependentRandomness = &value
	return b
}
